# You can communicate with the move_base node over ROS directly, but the recommended way to send goals to move_base if you care about tracking their status is by using the SimpleActionClient.




# ACTION SUBSCRIBED TOPICS
# move_base/goal (move_base_msgs/MoveBaseActionGoal)
# A goal for move_base to pursue in the world.

# move_base/cancel (actionlib_msgs/GoalID)
# A request to cancel a specific goal.




# ACTION PUBLISHED TOPICS
# move_base/feedback (move_base_msgs/MoveBaseActionFeedback)
# Feedback contains the current position of the base in the world.

# move_base/status (actionlib_msgs/GoalStatusArray)
# Provides status information on the goals that are sent to the move_base action.

# move_base/result (move_base_msgs/MoveBaseActionResult)
# Result is empty for the move_base action.




# SUBSCRIBED TOPICS
# move_base_simple/goal (geometry_msgs/PoseStamped)
# Provides a non-action interface to move_base for users that don't care about tracking the execution status of their goals.




# PUBLISHED TOPICS
# cmd_vel (geometry_msgs/Twist)
# A stream of velocity commands meant for execution by a mobile base.




# SERVICES
# ~make_plan (nav_msgs/GetPlan)
# Allows an external user to ask for a plan to a given pose from move_base without causing move_base to execute that plan.

# ~clear_unknown_space (std_srvs/Empty)
# Allows an external user to tell move_base to clear unknown space in the area directly around the robot. This is useful when move_base has its costmaps stopped for a long period of time and then started again in a new location in the environment.

# ~clear_costmaps (std_srvs/Empty)
# Allows an external user to tell move_base to clear obstacles in the costmaps used by move_base. This could cause a robot to hit things and should be used with caution.




# PARAMETERS
# ~recovery_behaviors (list, default: [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}] For 1.1+ series)
# A list of recovery behavior plugins to use with move_base. These behaviors will be run when move_base fails to find a valid plan in the order that they are specified. After each behavior completes, move_base will attempt to make a plan. If planning is successful, move_base will continue normal operation. Otherwise, the next recovery behavior in the list will be executed. 
# (1.0 series default: [{name: conservative_reset, type: ClearCostmapRecovery}, {name: rotate_recovery, type: RotateRecovery}, {name: aggressive_reset, type: ClearCostmapRecovery}]). Note: For the default parameters, the aggressive_reset behavior will clear out to a distance of 4 * ~/local_costmap/circumscribed_radius.

# ~controller_frequency (double, default: 20.0) - The rate in Hz at which to run the control loop and send velocity commands to the base.
controller_frequency: 0.5    # TODO: Will change during testing

# ~planner_patience (double, default: 5.0) - How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.
planner_patience: 5.0

# ~controller_patience (double, default: 15.0) - How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.
controller_patience: 15.0

# ~conservative_reset_dist (double, default: 3.0) - The distance away from the robot in meters beyond which obstacles will be cleared from the costmap when attempting to clear space in the map. Note, this parameter is only used when the default recovery behaviors are used for move_base.
conservative_reset_dist: 3.0

# ~recovery_behavior_enabled (bool, default: true) - Whether or not to enable the move_base recovery behaviors to attempt to clear out space.
recovery_behavior_enabled: true

# ~clearing_rotation_allowed (bool, default: true) - Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has not set the recovery_behaviors parameter to anything custom.
clearing_rotation_allowed: true

# ~shutdown_costmaps (bool, default: false) - Determines whether or not to shutdown costmaps of the node when move_base is in an inactive state
shutdown_costmaps: false

# ~oscillation_timeout (double, default: 0.0) - How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout.
oscillation_timeout: 10.0

# ~oscillation_distance (double, default: 0.5) - How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout 
oscillation_distance: 0.5

# ~planner_frequency (double, default: 0.0) - The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked.
planner_frequency: 0.0

# ~max_planning_retries (int32_t, default: -1) - How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries.
max_planning_retries: 5